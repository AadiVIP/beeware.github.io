body:

História
=======

O projeto BeeWare começou com uma pergunta simples: por que ferramentas que usamos como desenvolvedores Python melhorando na mesma taxa que o resto da tecnologia que usamos diariamente?
Python tem se provado uma linguagem altamente capaz - de acessível para iniciantes, mas poderosa nas mãos de experts. O Python está rapidamente se tornando uma parte importante de  análises de dados, computaçãoi ciêntífica, e ambiente de desenvolvimento web. E iniciativas como "Django Girls" demonstraram que usando o Python, é possível fornecer cursos de treinamento de 1 dia que introduzam pessoas sem experiência de programação para o Python; e no final de um dia, os participantes desenvolveram e implantaram um site dinâmico com banco de dados, implantado em um servidor visível publicamente.

.. _Django Girls: https://djangogirls.org/

No entanto, a experiência do desenvolvedor para alguém que escreve Python às vezes reflete mais do início dos anos 90 do que o novo milênio. O ambiente de desenvolvimento padrão para Python ainda é uma janela de console 80x25. Para os usuários que vieram de um ambiente Windows ou Apple, onde eles são usados para interfaces gráficas altamente detalhadas e bem desenhadas, esse flashback de 30 anos pode ser uma experiência completamente alienanadora.

E, sim, há IDEs (Integrated Development Environments) que fornecem uma experiência de aplicação nativa para escrever código. Mas essas ferramentas exigem que você adote, completamente, o modo da IDE de ver o projeto. Que muitas vezes apresentam tantas dores de cabeça para o processo de desenvolvimento como eles resolveram.

E assim, ficamos com um cisma interessante, entre o "jeito antigo" do desenvolvimento do Unix em uma janela de console e a "jeito novo" das IDEs todo-em-um.


A Filosofia Unix
~~~~~~~~~~~~~~~~~~~

No entanto, não precisa ser assim. O princípio central da Filosofia do Unix é que "cada ferramenta faz uma coisa, bem". Esta é uma filosofia muito poderosa, e permite a composição de cadeias de ferramentas extremamente poderosas, juntando um conjunto de ferramentas independentes, extremamente focadas.

Infelizmente, a maioria das ferramentas UNIX se convenceram que  isso também significa que "todas as ferramentas devem usar uma interface em linha de comando". No entanto, não há nada na filosofia UNIX que diga que as ferramentas precisam usar uma interface em linha de comando - acabou de ser assim.

O projeto BeeWare começou com a premissa de que podemos ter o melhor dos dois mundos. Podemos ter uma cadeia de ferramentas agregáveis que cada uma faz uma coisa, bem. Mas essas ferramentas também podem expor suas funcionalidades usando uma interface gráfica rica.

O Objetivo
========

O objetivo final do projeto BeeWare: Ser capaz de fazer pelo desenvolvedor de softwares mobile e de desktop o mesmo que o Django fez para o software web - colocar nas mãos dos usuários um conjunto de ferramentas e bibliotecas que lhes permite desenvolver interfaces ricas e nativas, e implantá-los em seus dispositivos. Isso inclui:

* Ferramentas para permitir que o Python seja executado em diferentes dispositivos,
* Ferramentas para empacotar um projeto Python para que ele possa ser executado nesses dispositivos,
* Bibliotecas para acessar os widgets nativos e as capacidades dos dispositivos,
* Ferramentas para ajudar a desenvolver, debugar, analisar e esses projetos.

Este objetivo é que este conjunto de ferramentas será fácil para os iniciantes usarem em um ambiente como o Django-Girls; mas poderoso o suficiente para que eles possam ser usados para produzir o próximo Instagram, Pinterest ou Disqus.

Mais importante ainda, pretende-se fazer tudo isso como uma comunidade de código aberto. O processo de desenvolvimento de código aberto provou ser a maneira mais confiável de desenvolver um software robusto e confiável, e o fato de qualquer um poder acessar o software significa que todos podem começar com o mesmo conjunto de ferramentas excelentes, sejam eles amadores, experts ou entusiastas.

Python everywhere
~~~~~~~~~~~~~~~~~

A modern computing project can't ignore the biggest development in computing of the last 10 years. Python prides itself on being a cross-platform language. 10 years ago, being cross-platform meant being available for Windows, macOS and Linux. These days, mobile computing is much more important. Despite this, there aren't many good options for Python programming on mobile platforms, and cross-platform mobile coding is still elusive.

BeeWare embraces mobile and other emerging platforms (like watches and set-top-boxes) as a first class citizen of the computing ecosystem - because if people have these devices, why shouldn't they be able to write software for them in Python.

Native everywhere
~~~~~~~~~~~~~~~~~~

It's easy to use themes to achieve cross-platform. However, it's easy to spot apps that have been built using themes - they're the ones that don't behave quite like any other app. Widgets don't look *quite* right, or there's a menu bar on a window in an OS X app. Themes can get quite close - but there are always telltale signs.

On top of that, native widgets are always faster than a themed generic widget. After all, you're using native system capability that has been tuned and optimized, not a drawing engine that's been layered on top of a generic widget.

Themes also miss many of the accessibility benefits of native platforms. Modern OS authors spend a lot of time tuning affordances for people with impaired mobility, vision or cognition. If you use native widgets, you usually get these affordances for free. If you reimplement widgets with a theme, you also have to re-implement the affordances.

BeeWare uses native widgets and native functionality, rather than using a theme-based approach to application development.

Python native
~~~~~~~~~~~~~

BeeWare is also an unapologetically "Python first" framework. We like Python. We like the way it looks, and the way it works. If Python isn't available as a first-class option on a particular platform, we'll do whatever is necessary to make Python available as a development language. And when we have the opportunity to embrace Python idiom for an API or a design, we're going to do just that. That means we're going to use generators, context managers, `yield from` asynchronous calls, and more, in order to provide the best Python-native API for cross-platform app development.

We're also looking to the future - this means that we support Python 3 exclusively.

Native experience
~~~~~~~~~~~~~~~~~

The experience of using any tool starts with the installation process. Part of BeeWare's "Native everywhere" philosophy is adopting appropriate native mechanisms for installation. If you're using a user-space tool, it should be presented to you as an package that installed in the same way you would install any other tool - be that through an app store, an installer, or a simple executable package. End users shouldn't know that you've written the application in Python.

But if you're using a developer tool or library, then it should integrate with your development environment. And since we're using Python, that means you should be able to install it into your virtual environment using `pip install` and nothing more. No C-extensions, no compilers, no setting system paths or environment variables - Just install it, import it, and start writing (or running) code.

More than just code
===================

It's about more than just code, though. A successful software project requires documentation, design skills, feedback and bug reports. The BeeWare community acknowledges that *all* contributions are important - not just the ones that come as a pull request on GitHub.

Even then, it's easy to think of a project in a vacuum, as the sum of all contributions. But that's never the case. An open source project is about community.

Diversity and inclusion
~~~~~~~~~~~~~~~~~~~~~~~

A diverse community is a strong community. This means accepting people of all levels of experience, from all backgrounds, of all races, creeds, orientations and expressions. The BeeWare project is committed to developing and maintaining a inclusive, diverse and welcoming community.

To back this up, we have an open offer to mentor anyone who wants to get involved as a contributor, and a `Code of Conduct`_ that is rigorously enforced. Any reports of violations of that code of conduct - even by senior community members - will be treated with respect and actioned appropriately.

.. _Code of Conduct: /community/behavior/code-of-conduct/

Healthy and sustainable
~~~~~~~~~~~~~~~~~~~~~~~

It's also important to make sure that the community is accessible and sustainable. It's unfortunately become an accepted part of Open Source culture that "true" Open Source projects have to be developed entirely by volunteers. This acts as a barrier to entry for many groups - the only people able to spend their free time volunteering are those that *have* free time.

It also frequently leads to burnout and other mental health issues amongst contributors. The fact that depression, anxiety, and burnout are so common in software development communities shouldn't be considered a badge of honour, or a demonstration of how committed a development team can be. It's a problem that needs to be tackled head on, and addressed in the same way a software bug would be addressed - with immediate workarounds, and long term plans to remove the systemic cause of the problem.

While we place incredible value on the contributions of volunteers, we also know that volunteer efforts alone aren't the way to develop a healthy and sustainable community. For that reason, financial sustainability is a key consideration in the operation of the BeeWare project. As a community, we don't ignore the role that money has to play in providing the resources that allows people to begin and continue to contribute. We will, as a community, provide accepted mechanisms for individuals to monetize their work in meaningful ways, and wherever possible, compensate people for their work - without compromising the ideals of Open Source development.

BeeWare: The IDEs of Python
===========================

This is BeeWare. We're incredibly excited about what the future holds for Python. We hope you'll join us on this journey.

---
gutter:

* `History`_
   - `The Unix Philosophy`_
* `The Goal`_
   - `Python everywhere`_
   - `Native everywhere`_
   - `Python native`_
   - `Native experience`_
* `More than just code`_
   - `Diversity and inclusion`_
   - `Healthy and sustainable`_

.. _`History`: ./#history
.. _`The Unix Philosophy`: ./#the-unix-philosophy
.. _`The Goal`: ./#the-goal
.. _`Python everywhere`: ./#python-everywhere
.. _`Native everywhere`: ./#native-everywhere
.. _`Python native`: ./#python-native
.. _`Native experience`: ./#native-experience
.. _`More than just code`: ./#more-than-just-code
.. _`Diversity and inclusion`: ./#diversity-and-inclusion
.. _`Healthy and sustainable`: ./#healthy-and-sustainable

---
sort_key: 2
---
summary: A história e filosofia do projeto BeeWare
---
title: Sobre o BeeWare

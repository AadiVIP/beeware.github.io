body:

História
=======

O projeto BeeWare começou com uma pergunta simples: por que ferramentas que usamos como desenvolvedores Python melhorando na mesma taxa que o resto da tecnologia que usamos diariamente?
Python tem se provado uma linguagem altamente capaz - de acessível para iniciantes, mas poderosa nas mãos de experts. O Python está rapidamente se tornando uma parte importante de  análises de dados, computaçãoi ciêntífica, e ambiente de desenvolvimento web. E iniciativas como "Django Girls" demonstraram que usando o Python, é possível fornecer cursos de treinamento de 1 dia que introduzam pessoas sem experiência de programação para o Python; e no final de um dia, os participantes desenvolveram e implantaram um site dinâmico com banco de dados, implantado em um servidor visível publicamente.

.. _Django Girls: https://djangogirls.org/

No entanto, a experiência do desenvolvedor para alguém que escreve Python às vezes reflete mais do início dos anos 90 do que o novo milênio. O ambiente de desenvolvimento padrão para Python ainda é uma janela de console 80x25. Para os usuários que vieram de um ambiente Windows ou Apple, onde eles são usados para interfaces gráficas altamente detalhadas e bem desenhadas, esse flashback de 30 anos pode ser uma experiência completamente alienanadora.

E, sim, há IDEs (Integrated Development Environments) que fornecem uma experiência de aplicação nativa para escrever código. Mas essas ferramentas exigem que você adote, completamente, o modo da IDE de ver o projeto. Que muitas vezes apresentam tantas dores de cabeça para o processo de desenvolvimento como eles resolveram.

E assim, ficamos com um cisma interessante, entre o "jeito antigo" do desenvolvimento do Unix em uma janela de console e a "jeito novo" das IDEs todo-em-um.


A Filosofia Unix
~~~~~~~~~~~~~~~~~~~

No entanto, não precisa ser assim. O princípio central da Filosofia do Unix é que "cada ferramenta faz uma coisa, bem". Esta é uma filosofia muito poderosa, e permite a composição de cadeias de ferramentas extremamente poderosas, juntando um conjunto de ferramentas independentes, extremamente focadas.

Infelizmente, a maioria das ferramentas UNIX se convenceram que  isso também significa que "todas as ferramentas devem usar uma interface em linha de comando". No entanto, não há nada na filosofia UNIX que diga que as ferramentas precisam usar uma interface em linha de comando - acabou de ser assim.

O projeto BeeWare começou com a premissa de que podemos ter o melhor dos dois mundos. Podemos ter uma cadeia de ferramentas agregáveis que cada uma faz uma coisa, bem. Mas essas ferramentas também podem expor suas funcionalidades usando uma interface gráfica rica.

O Objetivo
========

O objetivo final do projeto BeeWare: Ser capaz de fazer pelo desenvolvedor de softwares mobile e de desktop o mesmo que o Django fez para o software web - colocar nas mãos dos usuários um conjunto de ferramentas e bibliotecas que lhes permite desenvolver interfaces ricas e nativas, e implantá-los em seus dispositivos. Isso inclui:

* Ferramentas para permitir que o Python seja executado em diferentes dispositivos,
* Ferramentas para empacotar um projeto Python para que ele possa ser executado nesses dispositivos,
* Bibliotecas para acessar os widgets nativos e as capacidades dos dispositivos,
* Ferramentas para ajudar a desenvolver, debugar, analisar e esses projetos.

Este objetivo é que este conjunto de ferramentas será fácil para os iniciantes usarem em um ambiente como o Django-Girls; mas poderoso o suficiente para que eles possam ser usados para produzir o próximo Instagram, Pinterest ou Disqus.

Mais importante ainda, pretende-se fazer tudo isso como uma comunidade de código aberto. O processo de desenvolvimento de código aberto provou ser a maneira mais confiável de desenvolver um software robusto e confiável, e o fato de qualquer um poder acessar o software significa que todos podem começar com o mesmo conjunto de ferramentas excelentes, sejam eles amadores, experts ou entusiastas.

Python em todo lugar
~~~~~~~~~~~~~~~~~

Um projeto de computação moderno não pode ignorar um dos maiores desenvolvimento em computação dos últimos 10 anos. Python orgulha-se de ser uma linguagem multi-plataforma. Há 10 anos, a ser multi-plataforma significava estar disponível para Windows, MacOS e Linux. Atualmente, a computação móvel é muito mais importante. Apesar disso, não há muitas boas opções para a programação Python em plataformas móveis, e a codificação móvel multi-plataforma ainda é evasiva.

A BeeWare abraça as plataformas móveis e outras plataformas emergentes (como relógios e set-top-boxes) como um cidadão de primeira classe do ecossistema de computação - porque se as pessoas possuírem esses dispositivos, por que eles não poderiam escrever software para eles em Python.

Nativo em todo lugar
~~~~~~~~~~~~~~~~~~

É fácil usar temas para alcançar ser multi-plataforma. No entanto, é fácil detectar aplicativos que foram criados usando temas - eles são aqueles que não se comportam como outros aplicativos nativos. Os widgets que não  se * encaixam * , ou há uma barra de menu em uma janela em um aplicativo do OS X. Os temas podem ficar bem próximos - mas sempre há sinais que os revelam.

Além disso, os widgets nativos são sempre mais rápidos do que um widget genérico. Afinal, você está usando o recurso de sistema nativo que foi otimizado, e não uma engine gráfica que tenha sido colocada como uma camada em cima de um widget genérico.

Os temas também carecem de muitos dos benefícios de acessibilidade que as plataformas nativas possuem. Os autores de SO modernos passam muito tempo ajustando os recursos para pessoas com mobilidade , visão ou cognição prejudicadas. Se você usa widgets nativos, você geralmente obtém esses recursos gratuitamente. Se você reimplementar widgets com um tema, você também precisa re-implementar os recursos.

BeeWare utiliza widgets e funcionalidades nativas. ao imvez de utilizar uma aproximação baseada em temas para desenvolvimento de aplicações.

Nativo em Python
~~~~~~~~~~~~~

O BeeWare também explicitamente é um framework de "Python primeiro lugar". Nós gostamos de Python. Nós gostamos da maneira como ele se parece e da maneira como ele funciona. Se o Python não estiver disponível como uma opção de inicial em uma plataforma específica, faremos o que for necessário para tornar o Python disponível como uma linguagem de desenvolvimento. E quando tivermos a oportunidade de abraçar um idioma de Python para uma API ou um design, vamos fazer exatamente isso. Isso significa que vamos usar generators, gerenciadores de contexto, "yield from" de chamadas assíncronas e muito mais para fornecer a melhor API nativa de Python para o desenvolvimento de aplicativos multiplataforma.

Também estamos olhando para o futuro - isto significa que oferecemos suporte exclusivamente para Python 3.

Experiência nativa
~~~~~~~~~~~~~~~~~

A experiência de usar qualquer ferramenta começa com o processo de instalação. Parte da filosofia "Nativo em todo lugar" que a BeeWare está adotando inclui a utilização de mecanismos nativos apropriados para instalação. Se você estiver usando uma ferramenta de espaço de usuário, ele deve ser apresentado a você como um pacote que foi instalado da mesma forma que você instalaria qualquer outra ferramenta - seja através de uma loja de aplicativos, um instalador ou um pacote executável simples. Os usuários finais não devem saber que você escreveu o aplicativo no Python.

Mas se você estiver usando uma ferramenta de desenvolvedor ou biblioteca, então ela deve se integrar ao seu ambiente de desenvolvimento. E já que estamos usando Python, isso significa que você deve ser capaz de instalá-lo em seu ambiente virtual usando `pip install` e nada mais. Sem extensões em C, sem compiladores, sem configurações de caminhos do sistema ou variáveis de ambiente - Basta instalá-lo, importá-lo e começar a escrever (ou em execução) o código.

Mais que apenas código
===================

It's about more than just code, though. A successful software project requires documentation, design skills, feedback and bug reports. The BeeWare community acknowledges that *all* contributions are important - not just the ones that come as a pull request on GitHub.

Even then, it's easy to think of a project in a vacuum, as the sum of all contributions. But that's never the case. An open source project is about community.

Diversidade de inclusão
~~~~~~~~~~~~~~~~~~~~~~~

A diverse community is a strong community. This means accepting people of all levels of experience, from all backgrounds, of all races, creeds, orientations and expressions. The BeeWare project is committed to developing and maintaining a inclusive, diverse and welcoming community.

To back this up, we have an open offer to mentor anyone who wants to get involved as a contributor, and a `Code of Conduct`_ that is rigorously enforced. Any reports of violations of that code of conduct - even by senior community members - will be treated with respect and actioned appropriately.

.. _Code of Conduct: /community/behavior/code-of-conduct/

Healthy and sustainable
~~~~~~~~~~~~~~~~~~~~~~~

It's also important to make sure that the community is accessible and sustainable. It's unfortunately become an accepted part of Open Source culture that "true" Open Source projects have to be developed entirely by volunteers. This acts as a barrier to entry for many groups - the only people able to spend their free time volunteering are those that *have* free time.

It also frequently leads to burnout and other mental health issues amongst contributors. The fact that depression, anxiety, and burnout are so common in software development communities shouldn't be considered a badge of honour, or a demonstration of how committed a development team can be. It's a problem that needs to be tackled head on, and addressed in the same way a software bug would be addressed - with immediate workarounds, and long term plans to remove the systemic cause of the problem.

While we place incredible value on the contributions of volunteers, we also know that volunteer efforts alone aren't the way to develop a healthy and sustainable community. For that reason, financial sustainability is a key consideration in the operation of the BeeWare project. As a community, we don't ignore the role that money has to play in providing the resources that allows people to begin and continue to contribute. We will, as a community, provide accepted mechanisms for individuals to monetize their work in meaningful ways, and wherever possible, compensate people for their work - without compromising the ideals of Open Source development.

BeeWare: The IDEs of Python
===========================

This is BeeWare. We're incredibly excited about what the future holds for Python. We hope you'll join us on this journey.

---
gutter:

* `History`_
   - `The Unix Philosophy`_
* `The Goal`_
   - `Python everywhere`_
   - `Native everywhere`_
   - `Python native`_
   - `Native experience`_
* `More than just code`_
   - `Diversity and inclusion`_
   - `Healthy and sustainable`_

.. _`History`: ./#history
.. _`The Unix Philosophy`: ./#the-unix-philosophy
.. _`The Goal`: ./#the-goal
.. _`Python everywhere`: ./#python-everywhere
.. _`Native everywhere`: ./#native-everywhere
.. _`Python native`: ./#python-native
.. _`Native experience`: ./#native-experience
.. _`More than just code`: ./#more-than-just-code
.. _`Diversity and inclusion`: ./#diversity-and-inclusion
.. _`Healthy and sustainable`: ./#healthy-and-sustainable

---
sort_key: 2
---
summary: A história e filosofia do projeto BeeWare
---
title: Sobre o BeeWare

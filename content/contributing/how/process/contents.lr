_model: page
---
title: Process
---
sort_key: 2
---
summary: The BeeWare development process
---
body:

Overview
---------------

All changes, for code and documentation, should be `submitted
</contributing/how/first-time/github/>`_ via a Pull Request to the GitHub
repository for the project.

Most of the projects have a dedicated Contributing guide with specifics for
that project that can be found on ReadTheDocs. For instance, Briefcase's `guide
<https://briefcase.readthedocs.io/en/stable/how-to/contribute-code.html>`__ for
contributing code.

All submissions should abide by the `Code of Conduct
</community/behavior/code-of-conduct/>`_.

Change Notes
---------------

Several BeeWare projects, notably Briefcase and Toga, require each Pull Request
is submitted with a change note. These change notes are compiled together when
a Release is cut for the project to serve as Release Notes for users.

`Towncrier <https://towncrier.readthedocs.io/en/stable/>`__ is used to manage
change notes.

A change note file should be created in the ``changes`` directory and named
using this format::

    <PR/Issue #>.<Change Type>.rst

For instance, a Pull Request that fixes
GitHub Issue #42 would be named ``42.bugfix.rst``. If a Pull Request is not
associated with a specific Issue, then the Pull Request number should be used
instead.

All Change Types:

* ``feature``
* ``bugfix``
* ``doc``
* ``removal``
* ``misc``

The ``misc`` type is reserved for changes that do not affect users; therefore,
they do not need to be made aware of the change for a Release. For instance,
fixing a CI issue.

Code style
---------------

Please follow these coding standards when writing code for inclusion in BeeWare
projects. Unless otherwise specified, follow :pep:`8` (with careful attention
paid to `Section 2
<https://www.python.org/dev/peps/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds>`__).

BeeWare's projects use `Pre-commit <https://pre-commit.com/>`__ to automate
code style adherence. These checks are defined in the
``.pre-commit-config.yaml`` file for each repository and are automatically run in
`CI </contributing/how/first-time/what-is-a/ci>`_ when a Pull Request is
opened.

To automate the Pre-commit checks in your local development environment with
each ``git`` commit, run :code:`pre-commit install`.

Included Pre-commit checks:

* `Black <https://black.readthedocs.io/en/stable/index.html>`__ ensures uniform
  code formatting
* `docformatter <https://docformatter.readthedocs.io/en/latest/>`__ ensures
  uniform formatting for docstrings and comments
* `pyupgrade <https://github.com/asottile/pyupgrade>`__ ensures code is using
  the latest best practices for Python
* `isort <https://pycqa.github.io/isort/>`__ ensures uniform ``import``
  statements
* `flake8 <https://flake8.pycqa.org/en/latest/>`__ checks for common coding and
  syntax issues
* Misc checks that validate structured documents such as TOML files and remove
  unnecessary whitespace

Additional guidelines:

* Avoid use of "we" in comments, e.g. "Loop over" rather than "We loop over"
* Use underscores, not camelCase, for variable, function and method names
* Use InitialCaps for class names (or for factory functions that return classes)
* Use Sphinx-style docstrings and :pep:`257`; type annotation with :pep:`484`
  is optional but encouraged.

  For example::

      def function_name(param1: int, param2: str) -> bool:
          """Example function with types and a docstring.

          :param param1: The first parameter.
          :param param2: The second parameter.

          :returns: The return value. True for success, False otherwise.
          """

* In test docstrings, state the expected behavior that each test demonstrates.
  Don't include preambles such as "Tests that" or "Ensures that".
* Reserve ticket references for obscure issues where the ticket has additional
  details that can't be easily described in docstrings or comments. Include the
  ticket number at the end of a sentence like this::

      def test_foo():
          """A test docstring looks like this (#123456)."""

Sign your work
---------------

Before we can merge your contribution into BeeWare, you need to give us
permission to do so. Since you're an author of a creative work (a piece of
code, or some documentation), you automatically own the copyright for that
work. BeeWare can't legally use that contribution unless you give us
permission to do so.

The BeeWare project uses a mechanism known as a `Developer Certificate of Origin
(DCO) </contributing/how/dco/>`__ to manage this process. The DCO is a legally
binding statement that asserts that you are the creator of your contribution,
and that you wish to allow BeeWare to use your work.

To indicate that you agree to the terms of the DCO, you just add a line to
every git commit message::

    Signed-off-by: Joe Smith <joe.smith@email.com>

If you set your ``user.name`` and ``user.email`` as part of your git
configuration, you can sign your commit automatically with ``git commit -s``.

If you have more questions about Developer Certificates of Origin, why they are
required, what they mean, and how to configure your system to use them, see
`The Beginners Guide to DCOs </contributing/how/dco/>`__, or `get in touch with
the core team </community/team>`__.
